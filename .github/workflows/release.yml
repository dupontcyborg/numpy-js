name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Validate the release before proceeding
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          VERSION="${TAG#v}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.get_version.outputs.version }}"

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "::error::Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

          echo "âœ… Version verified: $PACKAGE_VERSION"

      - name: Check for changelog entry
        run: |
          if [ -f CHANGELOG.md ]; then
            if grep -q "${{ steps.get_version.outputs.version }}" CHANGELOG.md; then
              echo "âœ… Changelog entry found"
            else
              echo "::warning::No changelog entry found for version ${{ steps.get_version.outputs.version }}"
            fi
          else
            echo "::warning::CHANGELOG.md not found"
          fi

  # Run full test suite
  test:
    name: Full Test Suite
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node: [18, 20, 22]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install numpy
          npm ci

      - name: Run all tests (quick for now)
        run: npm run test:quick

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run bundle tests
        run: npm run test:bundles

  # Build production bundles
  build:
    name: Build Production Bundles
    needs: [validate, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all bundles
        run: npm run build

      - name: Verify build artifacts
        run: |
          echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY

          for file in dist/*.js dist/*.cjs; do
            if [ -f "$file" ]; then
              size=$(ls -lh "$file" | awk '{print $5}')
              gzip -c "$file" > "$file.gz"
              gzsize=$(ls -lh "$file.gz" | awk '{print $5}')
              rm "$file.gz"
              echo "| $(basename $file) | $size | $gzsize |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/
          retention-days: 90

  # Run benchmarks for release
  benchmark:
    name: Release Benchmarks
    needs: [validate, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install numpy
          npm ci

      - name: Run benchmarks
        run: npm run bench:quick

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks-${{ needs.validate.outputs.version }}
          path: |
            benchmarks/results/latest.json
            benchmarks/results/plots/
          retention-days: 90

  # Publish to npm (requires manual approval via 'release' environment)
  publish:
    name: Publish to npm
    needs: [validate, test, build, benchmark]
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://www.npmjs.com/package/numpy-ts
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create release summary
        run: |
          echo "## ðŸš€ Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **npm**: https://www.npmjs.com/package/numpy-ts/v/${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    needs: [validate, publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: benchmarks-${{ needs.validate.outputs.version }}
          path: benchmarks/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          files: |
            dist/*.js
            dist/*.cjs
            dist/*.map
            benchmarks/results/latest.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Post release summary
        run: |
          echo "## âœ… GitHub Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
